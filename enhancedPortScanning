import socket
import threading
from queue import Queue

target = "192.168.0.1"
# https://docs.python.org/3/library/queue.html The queue module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads. The Queue class in this module implements all the required locking semantics.
queue = Queue()
open_ports = []

def portscan(port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target, port))
        return True
    except:
        return False

# for port in range(1, 1024):
#     result = portscan(port)
#     if result:
#         print("Port {} is open!".format(port))
#     else:
#         print("Port {} is closed!".format(port))

def fill_queue(port_list):
    for port in port_list:
        queue.put(port)

def worker():
    while not queue.empty():
        port = queue.get()
        if portscan(port):
            print("Port {} is open!".format(port))
            open_ports.append(port)

port_list = range(1, 1024)
fill_queue(port_list)

thread_list = []

for t in range(500): # specify the number of threads you want to run
    thread = threading.Thread(target=worker) # targets the worker function
    thread_list.append(thread) # all threads into a list
# starts the threads
for thread in thread_list:
    thread.start()
# waits until all threads are finished to execute the last print statement
for thread in thread_list:
    thread.join()

print("Open ports are: ", open_ports)

